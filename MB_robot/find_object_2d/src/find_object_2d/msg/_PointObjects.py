"""autogenerated by genpy from find_object_2d/PointObjects.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import find_object_2d.msg

class PointObjects(genpy.Message):
  _md5sum = "f79b4adb458edaaf81faec054b53de74"
  _type = "find_object_2d/PointObjects"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Point_id[] objeto

================================================================================
MSG: find_object_2d/Point_id
int16 id
geometry_msgs/Point punto

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['objeto']
  _slot_types = ['find_object_2d/Point_id[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objeto

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PointObjects, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objeto is None:
        self.objeto = []
    else:
      self.objeto = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.objeto)
      buff.write(_struct_I.pack(length))
      for val1 in self.objeto:
        buff.write(_struct_h.pack(val1.id))
        _v1 = val1.punto
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.objeto is None:
        self.objeto = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objeto = []
      for i in range(0, length):
        val1 = find_object_2d.msg.Point_id()
        start = end
        end += 2
        (val1.id,) = _struct_h.unpack(str[start:end])
        _v2 = val1.punto
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.objeto.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.objeto)
      buff.write(_struct_I.pack(length))
      for val1 in self.objeto:
        buff.write(_struct_h.pack(val1.id))
        _v3 = val1.punto
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.objeto is None:
        self.objeto = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objeto = []
      for i in range(0, length):
        val1 = find_object_2d.msg.Point_id()
        start = end
        end += 2
        (val1.id,) = _struct_h.unpack(str[start:end])
        _v4 = val1.punto
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.objeto.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
_struct_3d = struct.Struct("<3d")
