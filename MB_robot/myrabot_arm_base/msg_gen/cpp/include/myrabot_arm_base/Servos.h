/* Auto-generated by genmsg_cpp for file /home/user/ROS_fuerte_workspace/sandbox/MB_robot/myrabot_arm_base/msg/Servos.msg */
#ifndef MYRABOT_ARM_BASE_MESSAGE_SERVOS_H
#define MYRABOT_ARM_BASE_MESSAGE_SERVOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace myrabot_arm_base
{
template <class ContainerAllocator>
struct Servos_ {
  typedef Servos_<ContainerAllocator> Type;

  Servos_()
  : base(0)
  , arti1(0)
  , arti2(0)
  , arti3(0)
  , pinza(0)
  {
  }

  Servos_(const ContainerAllocator& _alloc)
  : base(0)
  , arti1(0)
  , arti2(0)
  , arti3(0)
  , pinza(0)
  {
  }

  typedef int16_t _base_type;
  int16_t base;

  typedef int16_t _arti1_type;
  int16_t arti1;

  typedef int16_t _arti2_type;
  int16_t arti2;

  typedef int16_t _arti3_type;
  int16_t arti3;

  typedef int16_t _pinza_type;
  int16_t pinza;


  typedef boost::shared_ptr< ::myrabot_arm_base::Servos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::myrabot_arm_base::Servos_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Servos
typedef  ::myrabot_arm_base::Servos_<std::allocator<void> > Servos;

typedef boost::shared_ptr< ::myrabot_arm_base::Servos> ServosPtr;
typedef boost::shared_ptr< ::myrabot_arm_base::Servos const> ServosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::myrabot_arm_base::Servos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::myrabot_arm_base::Servos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace myrabot_arm_base

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::myrabot_arm_base::Servos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::myrabot_arm_base::Servos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::myrabot_arm_base::Servos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6be90daad19b44888c6ef8582506a939";
  }

  static const char* value(const  ::myrabot_arm_base::Servos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6be90daad19b4488ULL;
  static const uint64_t static_value2 = 0x8c6ef8582506a939ULL;
};

template<class ContainerAllocator>
struct DataType< ::myrabot_arm_base::Servos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "myrabot_arm_base/Servos";
  }

  static const char* value(const  ::myrabot_arm_base::Servos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::myrabot_arm_base::Servos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 base\n\
int16 arti1\n\
int16 arti2\n\
int16 arti3\n\
int16 pinza\n\
\n\
";
  }

  static const char* value(const  ::myrabot_arm_base::Servos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::myrabot_arm_base::Servos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::myrabot_arm_base::Servos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.base);
    stream.next(m.arti1);
    stream.next(m.arti2);
    stream.next(m.arti3);
    stream.next(m.pinza);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Servos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::myrabot_arm_base::Servos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::myrabot_arm_base::Servos_<ContainerAllocator> & v) 
  {
    s << indent << "base: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base);
    s << indent << "arti1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arti1);
    s << indent << "arti2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arti2);
    s << indent << "arti3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.arti3);
    s << indent << "pinza: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pinza);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MYRABOT_ARM_BASE_MESSAGE_SERVOS_H

