/* Auto-generated by genmsg_cpp for file /home/fer/fuerte_workspace/sandbox/find_object_2d/msg/Point_id.msg */
#ifndef FIND_OBJECT_2D_MESSAGE_POINT_ID_H
#define FIND_OBJECT_2D_MESSAGE_POINT_ID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace find_object_2d
{
template <class ContainerAllocator>
struct Point_id_ {
  typedef Point_id_<ContainerAllocator> Type;

  Point_id_()
  : id(0)
  , punto()
  {
  }

  Point_id_(const ContainerAllocator& _alloc)
  : id(0)
  , punto(_alloc)
  {
  }

  typedef int16_t _id_type;
  int16_t id;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _punto_type;
   ::geometry_msgs::Point_<ContainerAllocator>  punto;


  typedef boost::shared_ptr< ::find_object_2d::Point_id_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::find_object_2d::Point_id_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Point_id
typedef  ::find_object_2d::Point_id_<std::allocator<void> > Point_id;

typedef boost::shared_ptr< ::find_object_2d::Point_id> Point_idPtr;
typedef boost::shared_ptr< ::find_object_2d::Point_id const> Point_idConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::find_object_2d::Point_id_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::find_object_2d::Point_id_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace find_object_2d

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::find_object_2d::Point_id_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::find_object_2d::Point_id_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::find_object_2d::Point_id_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c12f20f6b5bab8a20acb724d501bc937";
  }

  static const char* value(const  ::find_object_2d::Point_id_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc12f20f6b5bab8a2ULL;
  static const uint64_t static_value2 = 0x0acb724d501bc937ULL;
};

template<class ContainerAllocator>
struct DataType< ::find_object_2d::Point_id_<ContainerAllocator> > {
  static const char* value() 
  {
    return "find_object_2d/Point_id";
  }

  static const char* value(const  ::find_object_2d::Point_id_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::find_object_2d::Point_id_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 id\n\
geometry_msgs/Point punto\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::find_object_2d::Point_id_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::find_object_2d::Point_id_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::find_object_2d::Point_id_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.punto);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Point_id_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::find_object_2d::Point_id_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::find_object_2d::Point_id_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "punto: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.punto);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FIND_OBJECT_2D_MESSAGE_POINT_ID_H

